
/*
	PROCEDURE PARA GERAR PEDIDO

*/


--DROP PROCEDURE IF EXISTS SP_GERAR_PEDIDO

--PRIMEIRO PARAMETRO ID DO CLIENTE
--SEGUNDO PARAMETRO ID DO VENDEDOR
--TERCEIRO PARAMETRO ID DO PRODUTO
--QUARTO PARAMETRO QUANTIDADE 

--OBS. PODEMOS INSERIR VARIOS CODIGOS DE PRODUTOS GERANDO UM PEDIDO COM VÁRIOS PRODUTOS,
--NO PARAMETRO DA QUANTIDADE SEGUIMOS A MESMA LÓGICA: PARA CADA CODIGO DE PRODUTO INSERIMOS A QUANTIDADE. 
--EXEMPLO:
BEGIN TRAN
EXECUTE SP_GERAR_PEDIDO 3, 5, '14,70', '1,1'
ROLLBACK
--GO

SELECT * FROM PEDIDO_VENDA 
USE LOJA_MUSICAL
GO

CREATE PROCEDURE SP_GERAR_PEDIDO(
	@IDCLIENTE INT,
	@IDVENDEDOR INT,
	@PRODUTOS VARCHAR(100), 
	@QTDE VARCHAR(100)
)

AS 
BEGIN 
	DECLARE @NUMVENDA INT 
	DECLARE @NUMSEQ INT = 1
	DECLARE @VAR INT
	DECLARE @IDPRODUTO INT
	DECLARE @CONT INT = 1
	DECLARE @VALOR_UNIT DECIMAL(8,2)
	DECLARE @VALOR_TOT DECIMAL(8,2)

	SET NOCOUNT ON
	IF EXISTS (SELECT TOP 1 * FROM PEDIDO_VENDA)
		BEGIN
			SET @NUMVENDA = (SELECT MAX(COD_VENDA) FROM PEDIDO_VENDA) + 1
		END
	ELSE
		BEGIN
			SET @NUMVENDA = 1
		END
	IF NOT EXISTS (SELECT TOP 1 ID_CLIENTE FROM CLIENTES WHERE ID_CLIENTE = @IDCLIENTE)
		BEGIN
			PRINT 'CLIENTE INEXISTENTE'
			RETURN
		END

	IF NOT EXISTS(SELECT TOP 1 ID_VENDEDOR FROM VENDEDORES WHERE ID_VENDEDOR = @IDVENDEDOR)
		BEGIN
			PRINT 'VENDEDOR INEXISTENTE'
			RETURN 
		END

	IF(SELECT COUNT(VALUE) FROM STRING_SPLIT(@QTDE,',',1)) <> (SELECT COUNT(VALUE) FROM STRING_SPLIT(@PRODUTOS, ',',1))
		BEGIN
				PRINT 'VERIFIQUE OS PARAMETROS INFORMADOS'
				RETURN 
		END
		WHILE(LEN(REPLACE(@QTDE,',','')) >= @CONT)
		  BEGIN
				SET @VAR =  (SELECT VALUE FROM STRING_SPLIT(@QTDE,',',1) WHERE ORDINAL = @CONT)
				SET @IDPRODUTO = (SELECT VALUE FROM STRING_SPLIT(@PRODUTOS, ',',1) WHERE ORDINAL = @CONT)


				IF NOT EXISTS(SELECT TOP 1 VALOR FROM PRODUTOS WHERE ID_PRODUTO = @IDPRODUTO)
					BEGIN
						PRINT 'PRODUTO INEXISTENTE'
						RETURN
					END 
				IF(SELECT QTD FROM PRODUTOS WHERE ID_PRODUTO = @IDPRODUTO) < @VAR
					BEGIN
						PRINT 'QUANTIDADE SUPERIOR A QUE ESTOQUE POSSUI'
						RETURN
					END
					SET @CONT += 1	
			END 

			
			SET @CONT = 1	
		WHILE(LEN(REPLACE(@QTDE,',','')) >= @CONT)
			BEGIN
				SET @VAR =  (SELECT VALUE FROM STRING_SPLIT(@QTDE,',',1) WHERE ORDINAL = @CONT)
				SET @IDPRODUTO = (SELECT VALUE FROM STRING_SPLIT(@PRODUTOS, ',',1) WHERE ORDINAL = @CONT)

				SET @VALOR_UNIT = (SELECT VALOR FROM PRODUTOS WHERE ID_PRODUTO = @IDPRODUTO)
				SET @VALOR_TOT = @VALOR_UNIT * @VAR
				

				INSERT INTO PEDIDO_VENDA(COD_VENDA, COD_SEQ, ID_VENDEDOR, ID_PRODUTO, ID_CLIENTE, QTD, VALOR_UNITARIO, VALOR_TOTAL, STATUS_PEDIDO)
				VALUES (@NUMVENDA,@NUMSEQ,@IDVENDEDOR,@IDPRODUTO, @IDCLIENTE, @VAR, @VALOR_UNIT, @VALOR_TOT, 'PENDENTE')

				SET @NUMSEQ += 1
				SET @CONT += 1							
			END

	PRINT 'PEDIOD REALIZADO COM SUCESSO'
	END
SET NOCOUNT OFF			

GO 


/*
	PROCEDURE PARA CONFIRMAR O PEDIDO

*/


--BEGIN TRAN

--DROP PROCEDURE IF EXISTS SP_CONFIRMAR_PEDIDO
--BEGIN TRAN

--EXECUTE SP_CONFIRMAR_PEDIDO 2
--ROLLBACK
--GO

CREATE PROCEDURE SP_CONFIRMAR_PEDIDO(
	@COD INT
)
AS 
BEGIN 

IF EXISTS (SELECT COD_VENDA FROM VENDAS WHERE COD_VENDA = @COD)
BEGIN
		PRINT 'O CODIGO DE VENDA INFORMADO J? FOI CONFIRMADO'
		RETURN 
END

IF NOT EXISTS(SELECT COD_VENDA FROM PEDIDO_VENDA WHERE COD_VENDA = @COD)
	BEGIN
		PRINT 'O CODIGO DO PEDIO INFORMADO N? EXISTE'
	RETURN 
END

SELECT * INTO #TESTE FROM PEDIDO_VENDA WHERE COD_VENDA = @COD

DECLARE @CODSEQ INT
DECLARE @VALTOT DECIMAL(8,2) = 0
DECLARE @IDCLIENTE INT 
DECLARE @IDVENDEDOR INT
DECLARE @DATAPEDIDO DATETIME

WHILE EXISTS(SELECT * FROM #TESTE)
BEGIN
	SELECT TOP 1  @CODSEQ = COD_SEQ FROM #TESTE
	SELECT TOP 1  @IDCLIENTE = ID_CLIENTE FROM #TESTE
    SELECT TOP 1  @IDVENDEDOR = ID_VENDEDOR FROM #TESTE 
	SELECT TOP 1  @DATAPEDIDO = DATA_PEDIDO FROM #TESTE
	SET @VALTOT = @VALTOT + (SELECT (QTD * VALOR_UNITARIO) FROM #TESTE WHERE COD_SEQ = @CODSEQ)
	
	
	UPDATE PRODUTOS
	SET QTD = PRODUTOS.QTD - (SELECT QTD FROM #TESTE WHERE COD_SEQ = @CODSEQ)
	WHERE ID_PRODUTO = (SELECT ID_PRODUTO FROM #TESTE WHERE COD_SEQ = @CODSEQ)

	
	DELETE FROM #TESTE
	WHERE COD_SEQ = @CODSEQ	
END

INSERT INTO VENDA(COD_VENDA, ID_CLIENTE, ID_VENDEDOR,DATA_VENDA,VALOR_TOTAL)
VALUES(@COD,@IDCLIENTE,@IDVENDEDOR,@DATAPEDIDO, @VALTOT)

UPDATE PEDIDO_VENDA 
SET STATUS_PEDIDO = 'APROVADO'
WHERE COD_VENDA = @COD

DROP TABLE #TESTE
END
GO


/*
	PROCEDURE PARA CANCELAR O PEDIDO

*/

--DROP PROCEDURE IF EXISTS SP_CANCELA_PEDIDO
--GO 


--BEGIN TRAN
--EXECUTE SP_CANCELA_PEDIDO 3
--ROLLBACK

--GO

CREATE PROCEDURE SP_CANCELA_PEDIDO
(
	@COD INT 
)
AS 
BEGIN
	IF NOT EXISTS(SELECT TOP 1 COD_VENDA FROM PEDIDO_VENDA WHERE COD_VENDA = @COD)
		BEGIN
			PRINT 'O CODIGO DO PEDIO INFORMADO N? EXISTE'
			RETURN 
		END
	IF(SELECT TOP 1 STATUS_PEDIDO FROM PEDIDO_VENDA WHERE COD_VENDA = @COD) = 'APROVADO'
		BEGIN
			PRINT 'O CODIGO DO PEDIO INFORMADO JÁ FOI APROVADO'
			RETURN
		END
	IF(SELECT TOP 1 STATUS_PEDIDO FROM PEDIDO_VENDA WHERE COD_VENDA = @COD) = 'CANCELADO'
		BEGIN
			PRINT 'O CODIGO DO PEDIO INFORMADO JÁ FOI CANCELADO'
			RETURN
		END 	

	UPDATE PEDIDO_VENDA
	SET STATUS_PEDIDO = 'CANCELADO'
	WHERE COD_VENDA = @COD
	
	PRINT 'PEDIDO CANCELADO COM SUCESSO'

END 
GO
